name: Android CI

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
      - uses: actions/checkout@v4
      # - name: Maximize Build Space
      #   uses: AdityaGarg8/remove-unwanted-software@v5
      #   with:
      #     remove-dotnet: 'true'          # Frees ~2 GB
      #     remove-android: 'true'         # Frees ~9 GB
      #     remove-haskell: 'true'         # Frees ~5.2 GB
      #     remove-codeql: 'true'          # Frees ~5.4 GB
      #     remove-docker-images: 'true'   # Frees ~3.2 GB
      #     remove-large-packages: 'true'  # Frees ~3.1 GB
      #     remove-swapfile: 'true'        # Frees ~4 GB
      #     remove-cached-tools: 'false'   # Avoid unless confirmed safe
      #     verbose: 'true'                # Enable detailed logging
        
      - name: 设定 CONFIG 环境变量
        run: |
          # Set CONFIG dynamically based on inputs values
          CONFIG="android8-4.9-337"

          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

          echo "CONFIG set to: $CONFIG"

      # Install ccache
      - name: 安装 ccache
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y ccache python3 git curl
      - name: install deps
        run: |
          sudo apt update
          sudo apt install -y git build-essential bc bison flex libssl-dev libelf-dev libncurses5-dev python3 python3-distutils curl rsync unzip ccache lzop dwarves device-tree-compiler gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi gcc-arm-linux-gnueabihf
          
      - name: 配置 ccache
        run: |
          mkdir -p ~/.cache/bazel
          ccache --version
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: 从缓存中还原ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: mix2s-15-ccache-${{ github.sha }}
          restore-keys: |
            mix2s-15-ccache-

      - name: 缓存工具链
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: |
            kernel-build-tools
            mkbootimg
            linux-x86
          key: toolchain-${{ runner.os }}-v1

      # Step 2: Download toolchain if cache was not found
      - name: 下载工具链（如果未找到缓存）
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-build-2024
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg
          git clone --depth=1 --filter=blob:none --sparse -b main https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86
          cd linux-x86
          git sparse-checkout set clang-r547379
      - name: 设置环境变量
        run: |
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV
          echo "PATH=$GITHUB_WORKSPACE/linux-x86/clang-r547379/bin:$PATH" >> $GITHUB_ENV
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "SUBARCH=arm64" >> $GITHUB_ENV
          echo "LLVM=1" >> $GITHUB_ENV
          echo "LLVM_IAS=1" >> $GITHUB_ENV
          echo "KBUILD_BUILD_USER=builder" >> $GITHUB_ENV
          echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "CROSS_COMPILE_ARM32=arm-linux-gnueabihf-" >> $GITHUB_ENV
          echo "CROSS_COMPILE_COMPAT=arm-linux-gnueabi-" >> $GITHUB_ENV
          echo "CC=clang" >> $GITHUB_ENV
          echo "KBUILD_BUILD_HOST=ubuntu" >> $GITHUB_ENV
          echo "KBUILD_BUILD_USER=builder" >> $GITHUB_ENV
          echo "CC=clang" >> $GITHUB_ENV
          echo "CC=ccache clang" >> $GITHUB_ENV
          echo "CXX=ccache clang++" >> $GITHUB_ENV
          echo "KERNEL_ROOT=$GITHUB_WORKSPACE/kernel_xiaomi_sdm845" >> $GITHUB_ENV
      - name: clone code
        run: |
          git clone --depth 1 -b vic https://github.com/Evolution-X-Devices/kernel_xiaomi_sdm845.git

      - name: patch SukiSU
        run: |
          cd kernel_xiaomi_sdm845
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s nongki
      # - uses: valeriangalliat/action-sshd-cloudflared@v4
      
      - name: apply SukiSU patches
        run: |
          git clone --depth=1 https://github.com/SukiSU-Ultra/SukiSU_patch.git
          cd kernel_xiaomi_sdm845
          cp ../SukiSU_patch/4.9/*.patch .
          for patch in *.patch; do
            echo "Applying $patch"
            patch -p1 < "$patch"
          done
      # - name: patch susfs
      #   run: |
      #     git clone -b kernel-4.9 --depth 1 https://gitlab.com/simonpunk/susfs4ksu.git
      #     cd susfs4ksu
      #     cp ./kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch $KERNEL_ROOT/KernelSU/
      #     cp ./kernel_patches/50_add_susfs_in_kernel-4.9.patch $KERNEL_ROOT/
      #     cp ./kernel_patches/fs/* $KERNEL_ROOT/fs/
      #     cp ./kernel_patches/include/linux/* $KERNEL_ROOT/include/linux/
      #     cd $KERNEL_ROOT/KernelSU
      #     patch -p1 < 10_enable_susfs_for_ksu.patch
      #     cd $KERNEL_ROOT
      #     patch -p1 < 50_add_susfs_in_kernel-4.9.patch
      # - uses: valeriangalliat/action-sshd-cloudflared@v4
      - name: build kernel
        run: |
          cd kernel_xiaomi_sdm845
          make O=out vendor/xiaomi/mi845_defconfig
          scripts/kconfig/merge_config.sh -m -O out out/.config arch/arm64/configs/vendor/xiaomi/polaris.config
          make O=out olddefconfig
          make -j$(nproc) O=out LLVM=1 LLVM_IAS=1
      - name: build boot.img
        run: |
          cd kernel_xiaomi_sdm845/out
          KERNEL_IMG=$(find $GITHUB_WORKSPACE/kernel_xiaomi_sdm845/out/arch/arm64/boot/ -type f -name "Image.gz-dtb" | head -n 1)
          RAMDISK_IMG=$(find $GITHUB_WORKSPACE/files -type f -name "ramdisk" | head -n 1)
          $MKBOOTIMG --kernel $KERNEL_IMG --ramdisk $RAMDISK_IMG --cmdline "console=ttyMSM0,115200n8 earlycon=msm_geni_serial,0xA84000 androidboot.hardware=qcom androidboot.console=ttyMSM0 msm_rtb.filter=0x237 ehci-hcd.park=3 lpm_levels.sleep_disabled=1 service_locator.enable=1 swiotlb=2048 androidboot.configfs=true loop.max_part=7 androidboot.usbcontroller=a600000.dwc3 androidboot.boot_devices=soc/1d84000.ufshc cgroup_disable=pressure androidboot.super_partition=system" --os_version 15.0.0 --os_patch_level 2025-09 --header_version 1 --pagesize 4096 --base 0x00000000 --kernel_offset 0x00008000 --ramdisk_offset 0x01000000 --tags_offset 0x00000100 -o boot_SukiSU.img
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SukiSU-kernel
          path: |
            ${{ github.workspace }}/kernel_xiaomi_sdm845/out/arch/arm64/boot/
            ${{ github.workspace }}/kernel_xiaomi_sdm845/out/boot_SukiSU.img
          retention-days: 14
          compression-level: 6
          if-no-files-found: error
